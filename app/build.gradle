
//noinspection GradleCompatible
apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'realm-android'

repositories {
    mavenCentral()
    google()
}

// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 5


def gitSha() {
    def p = 'git rev-parse --short HEAD'.execute([], project.rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        throw new RuntimeException(p.errorStream.text)
    }

    return p.text.trim()
}

def gitTimestamp() {
    def p = 'git log -n 1 --format=%at'.execute([], rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        throw new RuntimeException(p.errorStream.text)
    }

    return p.text.trim()
}

android {
    signingConfigs {
        amoss {

            keyAlias "keyamoss"
            keyPassword "1mg01ng2mar5"
            storeFile file("/Users/tonynguyen/keystores/android.jks")
            storePassword "1mg01ng2mar5"
        }
    }
    compileSdkVersion 30
    defaultConfig {
        applicationId "com.cliffordlab.moyo"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        buildConfigField 'String', 'GIT_SHA', "\"${gitSha()}\""
        buildConfigField 'long', 'GIT_TIMESTAMP', "${gitTimestamp()}L"
        buildConfigField("String", "FHIR_CLIENT_ID", FHIR_CLIENT_ID)
        buildConfigField "String", "PROD_FHIR_CLIENT_ID", PROD_FHIR_CLIENT_ID
        buildConfigField "String", "AIR_VISUAL_API_KEY", AIR_VISUAL_API_KEY
        buildConfigField "String", "GOOGLE_API_KEY", GOOGLE_API_KEY

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
        multiDexEnabled true
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.amoss
            debuggable false
        }
        debug {
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.amoss
        }
    }
    sourceSets {
        main.kotlin.srcDirs += '/src/main/java'

        main.resources.srcDirs = ['src/main/resources']
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
    afterEvaluate {
        android.sourceSets.all { sourceSet ->
            if (!sourceSet.name.startsWith("test")) {
                sourceSet.kotlin.setSrcDirs([])
            }
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }

    flavorDimensions "beta"
    productFlavors {
        prod {
            buildConfigField("String", "apiBase", '"https://amoss.emory.edu/"')
            applicationId = "com.cliffordlab.moyo"
            manifestPlaceholders = [
                    appName: "MoYo"
            ]
        }

        dev {
            buildConfigField("String", "apiBase", '"https://amoss.emory.edu/dev/"')
            dimension "beta"
            applicationId = "com.cliffordlab.moyo.dev"
            manifestPlaceholders = [
                    appName: "MoYo DEV"
            ]
        }
    }
    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/maven/com.squareup.okio/okio/pom.xml'
        exclude 'META-INF/maven/com.squareup.okio/okio/pom.properties'
    }
    configurations {
        all*.exclude group: 'com.google.guava', module: 'listenablefuture'
        all*.exclude group: 'com.google.android.gms', module: 'classes.jar'
        all*.exclude group: 'com.google.android.gms.internal.places.zzaa', module: 'classes.jar'
    }

}

dependencies {
    implementation 'com.squareup.picasso:picasso:2.71828'

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //evernote android job library
    implementation "androidx.core:core-ktx:1.6.0"
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.5.0-alpha01'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.preference:preference-ktx:1.1.1'

    implementation 'com.jakewharton:butterknife:10.2.3'
    implementation 'androidx.drawerlayout:drawerlayout:1.1.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'

    implementation 'androidx.recyclerview:recyclerview:1.2.1'

    implementation 'io.reactivex.rxjava2:rxjava:2.2.9'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'

    implementation 'com.google.android.gms:play-services-awareness:17.1.0'
    implementation 'com.google.android.gms:play-services-fitness:18.0.0'
    implementation 'com.google.android.gms:play-services-places:16.0.0'
    implementation 'com.google.android.gms:play-services-auth:17.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.evernote:android-job:1.2.0'
    androidTestImplementation 'junit:junit:4.12'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    // Retrofit & OkHttp
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    //graphs
    implementation 'com.github.PhilJay:MPAndroidChart:v2.1.4'
    //aws
    implementation('com.amazonaws:aws-android-sdk-mobile-client:2.6.+@aar') { transitive = true }
    implementation 'com.amazonaws:aws-android-sdk-s3:2.23.0'
    implementation 'com.amazonaws:aws-android-sdk-cognito:2.6.31'
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.4.32"
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    //sdk runtime environment requirement
    implementation 'org.aspectj:aspectjrt:1.8.9'
    implementation 'org.javassist:javassist:3.21.0-GA'
    api 'org.apache.commons:commons-lang3:3.8.1'
    api 'com.squareup.retrofit2:retrofit:2.5.0'
    api 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'

    // Declare the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:28.2.1')

    // Add the dependency for the Firebase SDK for Google Analytics
    // When using the BoM, don't specify versions in Firebase dependencies
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
}
